import os
from datetime import datetime, timedelta

# Archivos donde guardamos la informaci√≥n
ARCHIVO_ALUMNOS = "alumnos.txt"       # Datos de los estudiantes
ARCHIVO_LIBROS = "libros.txt"         # Informaci√≥n de los libros
ARCHIVO_PRESTAMOS = "prestamos.txt"   # Registro de pr√©stamos
ARCHIVO_SANCIONES = "sanciones.txt"   # Alumnos sancionados

# Preparar los archivos si no existen
def preparar_archivos():
    for archivo in [ARCHIVO_ALUMNOS, ARCHIVO_LIBROS, ARCHIVO_PRESTAMOS, ARCHIVO_SANCIONES]:
        if not os.path.exists(archivo):
            open(archivo, 'w').close()  # Creamos archivos vac√≠os

# Herramientas √∫tiles
def limpiar_pantalla():
    os.system('cls' if os.name == 'nt' else 'clear')  # Funciona en Windows y Linux/Mac

def pedir_numero(mensaje):
    while True:
        try:
            return int(input(mensaje))
        except ValueError:
            print("¬°Ups! Debes ingresar un n√∫mero entero. Intenta de nuevo.")

def pedir_fecha(mensaje):
    while True:
        fecha_str = input(mensaje + " (formato d√≠a/mes/a√±o, ej. 15/06/2023): ")
        try:
            return datetime.strptime(fecha_str, "%d/%m/%Y").date()
        except ValueError:
            print("Formato incorrecto. Por favor usa DD/MM/AAAA.")

# Gesti√≥n de estudiantes
def agregar_estudiante():
    limpiar_pantalla()
    print("\n‚ú® REGISTRAR NUEVO ESTUDIANTE ‚ú®")
    print("Por favor ingresa los datos del estudiante:\n")
    
    cedula = input("N√∫mero de c√©dula: ")
    
    # Verificar si el estudiante ya est√° registrado
    with open(ARCHIVO_ALUMNOS, 'r') as archivo:
        for linea in archivo:
            if linea.startswith(cedula + "|"):
                print("\n¬°Atenci√≥n! Ya existe un estudiante con esta c√©dula.")
                input("\nPresiona Enter para volver al men√∫...")
                return
    
    nombre = input("Nombre completo: ")
    carrera = input("Carrera que estudia: ")
    
    # Guardamos la informaci√≥n
    with open(ARCHIVO_ALUMNOS, 'a') as archivo:
        archivo.write(f"{cedula}|{nombre}|{carrera}\n")
    
    print("\n¬°Estudiante registrado con √©xito! ‚úÖ")
    input("\nPresiona Enter para continuar...")

def mostrar_estudiantes():
    limpiar_pantalla()
    print("\nüìö LISTA DE ESTUDIANTES REGISTRADOS üìö\n")
    
    try:
        with open(ARCHIVO_ALUMNOS, 'r') as archivo:
            estudiantes = archivo.readlines()
            
            if not estudiantes:
                print("A√∫n no hay estudiantes registrados.")
            else:
                for i, linea in enumerate(estudiantes, 1):
                    cedula, nombre, carrera = linea.strip().split('|')
                    print(f"{i}. {nombre} (C√©dula: {cedula})")
                    print(f"   Carrera: {carrera}\n")
    except FileNotFoundError:
        print("No se encontr√≥ el archivo de estudiantes.")
    
    input("\nPresiona Enter para volver al men√∫...")

# Gesti√≥n de libros
def agregar_libro():
    limpiar_pantalla()
    print("\nüìñ A√ëADIR NUEVO LIBRO A LA BIBLIOTECA üìñ\n")
    
    codigo = input("C√≥digo √∫nico del libro: ")
    
    # Verificar si el libro ya existe
    with open(ARCHIVO_LIBROS, 'r') as archivo:
        for linea in archivo:
            if linea.startswith(codigo + "|"):
                print("\n¬°Este c√≥digo de libro ya est√° registrado!")
                input("\nPresiona Enter para volver...")
                return
    
    titulo = input("T√≠tulo del libro: ")
    autor = input("Autor(es): ")
    categoria = input("Categor√≠a (ej. Novela, Ciencia, Historia): ")
    cantidad = pedir_numero("Cantidad de ejemplares disponibles: ")
    
    # Guardar el nuevo libro
    with open(ARCHIVO_LIBROS, 'a') as archivo:
        archivo.write(f"{codigo}|{titulo}|{autor}|{categoria}|{cantidad}\n")
    
    print("\n¬°Libro agregado exitosamente! üìö‚úÖ")
    input("\nPresiona Enter para continuar...")

def mostrar_libros():
    limpiar_pantalla()
    print("\nüìö CAT√ÅLOGO DE LIBROS DISPONIBLES üìö\n")
    
    try:
        with open(ARCHIVO_LIBROS, 'r') as archivo:
            libros = archivo.readlines()
            
            if not libros:
                print("El cat√°logo de libros est√° vac√≠o.")
            else:
                for i, linea in enumerate(libros, 1):
                    codigo, titulo, autor, categoria, cantidad = linea.strip().split('|')
                    print(f"{i}. {titulo}")
                    print(f"   Autor: {autor}")
                    print(f"   Categor√≠a: {categoria}")
                    print(f"   Ejemplares disponibles: {cantidad}\n")
    except FileNotFoundError:
        print("No se encontr√≥ el archivo de libros.")
    
    input("\nPresiona Enter para volver al men√∫...")

# Gesti√≥n de pr√©stamos
def prestar_libro():
    limpiar_pantalla()
    print("\nüîÑ REGISTRAR PR√âSTAMO DE LIBRO üîÑ\n")
    
    # Verificar estudiante
    cedula = input("C√©dula del estudiante: ")
    estudiante_valido = False
    
    with open(ARCHIVO_ALUMNOS, 'r') as archivo:
        for linea in archivo:
            if linea.startswith(cedula + "|"):
                estudiante_valido = True
                break
    
    if not estudiante_valido:
        print("\n‚ùå No encontramos un estudiante con esta c√©dula.")
        input("\nPresiona Enter para volver...")
        return
    
    # Verificar sanciones
    hoy = datetime.now().date()
    sancionado = False
    
    with open(ARCHIVO_SANCIONES, 'r') as archivo:
        for linea in archivo:
            datos = linea.strip().split('|')
            if datos[0] == cedula and datetime.strptime(datos[2], "%d/%m/%Y").date() >= hoy:
                sancionado = True
                print(f"\n‚ö†Ô∏è Este estudiante est√° sancionado hasta el {datos[2]}")
                print(f"Motivo: {datos[1]}")
                input("\nPresiona Enter para volver...")
                return
    
    # Verificar libro
    codigo = input("C√≥digo del libro a prestar: ")
    libro_valido = False
    
    with open(ARCHIVO_LIBROS, 'r') as archivo:
        lineas = archivo.readlines()
    
    for i, linea in enumerate(lineas):
        datos = linea.strip().split('|')
        if datos[0] == codigo:
            libro_valido = True
            if int(datos[4]) <= 0:
                print("\n‚ùå Lo sentimos, no hay ejemplares disponibles de este libro.")
                input("\nPresiona Enter para volver...")
                return
            
            # Actualizar cantidad disponible
            datos[4] = str(int(datos[4]) - 1)
            lineas[i] = '|'.join(datos) + '\n'
            break
    
    if not libro_valido:
        print("\n‚ùå No encontramos un libro con este c√≥digo.")
        input("\nPresiona Enter para volver...")
        return
    
    # Registrar pr√©stamo
    fecha_prestamo = datetime.now().date()
    fecha_devolucion = fecha_prestamo + timedelta(days=3)  # Plazo de 3 d√≠as
    
    with open(ARCHIVO_PRESTAMOS, 'a') as archivo:
        archivo.write(f"{cedula}|{codigo}|{fecha_prestamo.strftime('%d/%m/%Y')}|{fecha_devolucion.strftime('%d/%m/%Y')}\n")
    
    # Actualizar archivo de libros
    with open(ARCHIVO_LIBROS, 'w') as archivo:
        archivo.writelines(lineas)
    
    print("\n¬°Pr√©stamo registrado con √©xito! ‚úÖ")
    print(f"üìÖ Fecha de devoluci√≥n: {fecha_devolucion.strftime('%d/%m/%Y')}")
    input("\nPresiona Enter para continuar...")

def mostrar_prestamos_activos():
    limpiar_pantalla()
    print("\nüìù PR√âSTAMOS EN CURSO üìù\n")
    
    hoy = datetime.now().date()
    
    try:
        with open(ARCHIVO_PRESTAMOS, 'r') as prestamos_archivo, \
             open(ARCHIVO_ALUMNOS, 'r') as alumnos_archivo:
            
            prestamos = [linea.strip().split('|') for linea in prestamos_archivo]
            alumnos = {linea.split('|')[0]: linea.split('|')[1] for linea in alumnos_archivo}
            
            if not prestamos:
                print("No hay pr√©stamos activos en este momento.")
            else:
                for prestamo in prestamos:
                    cedula, codigo_libro, fecha_p, fecha_dev = prestamo
                    fecha_devolucion = datetime.strptime(fecha_dev, "%d/%m/%Y").date()
                    
                    estado = "‚úÖ En plazo" if hoy <= fecha_devolucion else "‚ö†Ô∏è Atrasado"
                    nombre = alumnos.get(cedula, "Nombre no disponible")
                    
                    print(f"üë§ Estudiante: {nombre} (C√©dula: {cedula})")
                    print(f"üìñ Libro prestado: {codigo_libro}")
                    print(f"üìÖ Fecha pr√©stamo: {fecha_p}")
                    print(f"üìÖ Fecha devoluci√≥n: {fecha_dev}")
                    print(f"üîÑ Estado: {estado}\n")
    except FileNotFoundError:
        print("No se encontraron archivos de pr√©stamos o estudiantes.")
    
    input("\nPresiona Enter para volver al men√∫...")

# Gesti√≥n de sanciones
def mostrar_sancionados():
    limpiar_pantalla()
    print("\nüö´ ESTUDIANTES SANCIONADOS ACTUALMENTE üö´\n")
    
    hoy = datetime.now().date()
    
    try:
        with open(ARCHIVO_SANCIONES, 'r') as sanciones_archivo, \
             open(ARCHIVO_ALUMNOS, 'r') as alumnos_archivo:
            
            sanciones = [linea.strip().split('|') for linea in sanciones_archivo]
            alumnos = {linea.split('|')[0]: linea.split('|')[1] for linea in alumnos_archivo}
            
            if not sanciones:
                print("No hay estudiantes sancionados en este momento.")
            else:
                for sancion in sanciones:
                    cedula, motivo, fecha_fin = sancion
                    fecha_fin_sancion = datetime.strptime(fecha_fin, "%d/%m/%Y").date()
                    
                    if fecha_fin_sancion >= hoy:
                        nombre = alumnos.get(cedula, "Nombre no disponible")
                        print(f"üë§ Estudiante: {nombre} (C√©dula: {cedula})")
                        print(f"üìå Motivo: {motivo}")
                        print(f"üìÖ Sancionado hasta: {fecha_fin}\n")
    except FileNotFoundError:
        print("No se encontraron archivos de sanciones o estudiantes.")
    
    input("\nPresiona Enter para volver al men√∫...")

# Renovaci√≥n de pr√©stamos
def renovar_prestamo():
    limpiar_pantalla()
    print("\nüîÑ RENOVAR PR√âSTAMO DE LIBRO üîÑ\n")
    
    cedula = input("C√©dula del estudiante: ")
    codigo = input("C√≥digo del libro a renovar: ")
    
    # Buscar pr√©stamo
    with open(ARCHIVO_PRESTAMOS, 'r') as archivo:
        lineas = archivo.readlines()
    
    encontrado = False
    for i, linea in enumerate(lineas):
        datos = linea.strip().split('|')
        if datos[0] == cedula and datos[1] == codigo:
            encontrado = True
            hoy = datetime.now().date()
            fecha_dev = datetime.strptime(datos[3], "%d/%m/%Y").date()
            
            if hoy > fecha_dev:
                print("\n‚ùå No se puede renovar un pr√©stamo atrasado.")
                print("Por favor devuelve el libro y regulariza tu situaci√≥n.")
                input("\nPresiona Enter para volver...")
                return
            
            # Actualizar fecha de devoluci√≥n
            nueva_fecha = hoy + timedelta(days=3)
            datos[3] = nueva_fecha.strftime("%d/%m/%Y")
            lineas[i] = '|'.join(datos) + '\n'
            break
    
    if not encontrado:
        print("\n‚ùå No encontramos el pr√©stamo especificado.")
        input("\nPresiona Enter para volver...")
        return
    
    # Actualizar archivo
    with open(ARCHIVO_PRESTAMOS, 'w') as archivo:
        archivo.writelines(lineas)
    
    print("\n¬°Pr√©stamo renovado con √©xito! ‚úÖ")
    print(f"üìÖ Nueva fecha de devoluci√≥n: {nueva_fecha.strftime('%d/%m/%Y')}")
    input("\nPresiona Enter para continuar...")

# Devoluci√≥n de libros
def devolver_libro():
    limpiar_pantalla()
    print("\n‚Ü©Ô∏è REGISTRAR DEVOLUCI√ìN DE LIBRO ‚Ü©Ô∏è\n")
    
    cedula = input("C√©dula del estudiante: ")
    codigo = input("C√≥digo del libro a devolver: ")
    
    # Buscar y eliminar pr√©stamo
    with open(ARCHIVO_PRESTAMOS, 'r') as archivo:
        lineas = archivo.readlines()
    
    prestamo_encontrado = False
    nuevas_lineas = []
    datos_prestamo = None
    
    for linea in lineas:
        datos = linea.strip().split('|')
        if datos[0] == cedula and datos[1] == codigo:
            prestamo_encontrado = True
            datos_prestamo = datos
        else:
            nuevas_lineas.append(linea)
    
    if not prestamo_encontrado:
        print("\n‚ùå No encontramos el pr√©stamo especificado.")
        input("\nPresiona Enter para volver...")
        return
    
    # Verificar retraso
    hoy = datetime.now().date()
    fecha_dev = datetime.strptime(datos_prestamo[3], "%d/%m/%Y").date()
    
    if hoy > fecha_dev:
        fin_sancion = hoy + timedelta(days=7)
        with open(ARCHIVO_SANCIONES, 'a') as archivo:
            archivo.write(f"{cedula}|Retraso en devoluci√≥n|{fin_sancion.strftime('%d/%m/%Y')}\n")
        print("\n‚ö†Ô∏è El estudiante ha sido sancionado por 7 d√≠as por devoluci√≥n tard√≠a.")
    
    # Actualizar pr√©stamos
    with open(ARCHIVO_PRESTAMOS, 'w') as archivo:
        archivo.writelines(nuevas_lineas)
    
    # Actualizar disponibilidad del libro
    with open(ARCHIVO_LIBROS, 'r') as archivo:
        lineas_libros = archivo.readlines()
    
    for i, linea in enumerate(lineas_libros):
        datos = linea.strip().split('|')
        if datos[0] == codigo:
            datos[4] = str(int(datos[4]) + 1)
            lineas_libros[i] = '|'.join(datos) + '\n'
            break
    
    with open(ARCHIVO_LIBROS, 'w') as archivo:
        archivo.writelines(lineas_libros)
    
    print("\n¬°Devoluci√≥n registrada con √©xito! ‚úÖ")
    input("\nPresiona Enter para continuar...")

# Men√∫ interactivo
def mostrar_menu():
    preparar_archivos()
    while True:
        limpiar_pantalla()
        print("\nüèõÔ∏è SISTEMA DE BIBLIOTECA AMIGABLE üèõÔ∏è")
        print("\n¬øQu√© deseas hacer hoy?")
        print("1. Registrar nuevo estudiante")
        print("2. Agregar nuevo libro al cat√°logo")
        print("3. Registrar pr√©stamo de libro")
        print("4. Ver pr√©stamos activos")
        print("5. Ver cat√°logo de libros")
        print("6. Ver estudiantes sancionados")
        print("7. Renovar pr√©stamo de libro")
        print("8. Registrar devoluci√≥n de libro")
        print("9. Ver todos los estudiantes")
        print("0. Salir del sistema")
        
        opcion = input("\nElige una opci√≥n (0-9): ")
        
        if opcion == "1":
            agregar_estudiante()
        elif opcion == "2":
            agregar_libro()
        elif opcion == "3":
            prestar_libro()
        elif opcion == "4":
            mostrar_prestamos_activos()
        elif opcion == "5":
            mostrar_libros()
        elif opcion == "6":
            mostrar_sancionados()
        elif opcion == "7":
            renovar_prestamo()
        elif opcion == "8":
            devolver_libro()
        elif opcion == "9":
            mostrar_estudiantes()
        elif opcion == "0":
            print("\n¬°Gracias por usar nuestro sistema de biblioteca! üìö‚ù§Ô∏è")
            print("Hasta pronto...\n")
            break
        else:
            print("\n‚ùå Opci√≥n no v√°lida. Por favor elige un n√∫mero del 0 al 9.")
            input("\nPresiona Enter para intentar de nuevo...")

# Iniciar el programa
if __name__ == "__main__":
    mostrar_menu()
